{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for the local Admin and domain admin"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for local admin and domain admin"
      }
    }
  },
  "functions": [],
  "variables": {
    "ilbName": "[toLower(concat('ilb', substring( uniquestring(resourceGroup().id), 0, 5 ) ) )]",
    "location": "[resourceGroup().location]",
    "storageName": "[toLower(concat('storage', substring( uniquestring(resourceGroup().id), 0, 5 ) ) )]"
  },
  "resources": [
    {
      "name": "[variables('storageName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-04-01",
      "location": "[variables('location')]",
      "tags": {},
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "Storage"
    },
    {
      "name": "dc-PublicIP",
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-11-01",
      "location": "[variables('location')]",
      "tags": {},
      "properties": {
        "publicIPAllocationMethod": "Static"
      }
    },
    {
      "name": "1awesome-nsg",
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2020-11-01",
      "location": "[variables('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "nsgRule1",
            "properties": {
              "description": "description",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "3389",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "name": "1awesome-VirtualNetwork",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-11-01",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', '1awesome-nsg')]"
      ],
      "tags": {},
      "properties": {
        "addressSpace": {
          "addressPrefixes": ["10.0.0.0/16"]
        },
        "subnets": [
          {
            "name": "1awesome-VirtualNetwork-Subnet",
            "properties": {
              "addressPrefix": "10.0.0.0/24",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', '1awesome-nsg')]"
              }
            }
          },
          {
            "name": "AzureBastionSubnet",
            "properties": {
              "addressPrefix": "10.0.1.0/26",
              "delegations": [],
              "privateEndpointNetworkPolicies": "Enabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/bastionHosts",
      "apiVersion": "2020-11-01",
      "name": "1awesome-VirtualNetwork-Bastion",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', 'bastion-PublicIP')]",
        "[resourceId('Microsoft.Network/virtualNetworks', '1awesome-VirtualNetwork')]"
      ],
      "properties": {
        "dnsName": "bst-90498298-d97d-4a30-a10e-ad5126ba24cd.bastion.azure.com",
        "ipConfigurations": [
          {
            "name": "IpConf",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', 'bastion-PublicIP')]"
              },
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', '1awesome-VirtualNetwork', 'AzureBastionSubnet')]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-11-01",
      "name": "bastion-PublicIP",
      "location": "[variables('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static"
      }
    },
    {
      "name": "dc-NetworkInterface",
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-11-01",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', 'dc-PublicIP')]",
        "[resourceId('Microsoft.Network/virtualNetworks', '1awesome-VirtualNetwork')]"
      ],
      "tags": {},
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipConfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "10.0.0.4",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', 'dc-PublicIP')]"
              },
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', '1awesome-VirtualNetwork', '1awesome-VirtualNetwork-Subnet')]"
              }
            }
          }
        ]
      }
    },
    {
      "name": "dc",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2021-03-01",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageName'))]",
        "[resourceId('Microsoft.Network/networkInterfaces', 'dc-NetworkInterface')]"
      ],
      "tags": {},
      "properties": {
        "hardwareProfile": {
          "vmSize": "Standard_D2S_v3"
        },
        "osProfile": {
          "computerName": "dc",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "2022-Datacenter",
            "version": "latest"
          },
          "osDisk": {
            "name": "dcOSDisk",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', 'dc-NetworkInterface')]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageName'))).primaryEndpoints.blob]"
          }
        }
      }
    },
    {
      "name": "[concat('dc','/', 'vmBGInfo')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2021-03-01",
      "location": "[variables('location')]",
      "tags": {},
      "dependsOn": ["[resourceId('Microsoft.Compute/virtualMachines', 'dc')]"],
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "BGInfo",
        "typeHandlerVersion": "2.1",
        "autoUpgradeMinorVersion": true,
        "settings": {},
        "protectedSettings": null
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2021-04-01",
      "name": "[concat('dc','/', 'SetupADDS')]",
      "location": "[variables('location')]",
      "dependsOn": ["[resourceId('Microsoft.Compute/virtualMachines', 'dc')]"],
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "CustomScriptExtension",
        "typeHandlerVersion": "1.7",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "https://raw.githubusercontent.com/linuxacademy/az-801-configuring-windows-server-hybrid-advanced-services/main/06%20-%20Implement%20a%20Windows%20Server%20Failover%20Cluster/DemoEnvironment/dcconfigure.ps1"
          ],
          "commandToExecute": "powershell.exe -ExecutionPolicy Unrestricted -File dcconfigure.ps1"
        }
      }
    },




    {
      "name": "server1-PublicIP",
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-11-01",
      "location": "[variables('location')]",
      "tags": {},
      "sku": 
      {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static"
      }
    },

    {
      "name": "server1-NetworkInterface",
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-11-01",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', 'server1-PublicIP')]",
        "[resourceId('Microsoft.Network/virtualNetworks', '1awesome-VirtualNetwork')]",
        "[resourceId('Microsoft.Network/loadBalancers', variables('ilbName'))]"
      ],
      "tags": {},
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipConfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "10.0.0.5",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', 'server1-PublicIP')]"
              },
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', '1awesome-VirtualNetwork', '1awesome-VirtualNetwork-Subnet')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('ilbName'), 'backend')]"
                }
              ]
            }
          }
        ],
        "dnsSettings": {
          "dnsServers": ["10.0.0.4"]
        }
      }
    },
    {
      "name": "server1",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2021-03-01",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageName'))]",
        "[resourceId('Microsoft.Network/networkInterfaces', 'server1-NetworkInterface')]",
        "[resourceId('Microsoft.Compute/disks', 'clusterdisk1')]",
        "Microsoft.Compute/virtualMachines/dc/extensions/SetupADDS"
      ],
      "tags": {},
      "properties": {
        "hardwareProfile": {
          "vmSize": "Standard_D2S_v3"
        },
        "osProfile": {
          "computerName": "server1",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "2022-Datacenter",
            "version": "latest"
          },
          "osDisk": {
            "name": "server1OSDisk",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": [
          {
              "lun": 0,
              "name": "clusterdisk1",
              "createOption": "Attach",
              "caching": "None",
              "writeAcceleratorEnabled": false,
              "managedDisk": {
                  "storageAccountType": "StandardSSD_LRS",
                  "id": "[resourceId('Microsoft.Compute/disks', 'clusterdisk1')]"
              },
              "deleteOption": "Detach",
              "diskSizeGB": 8,
              "toBeDetached": false
          }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', 'server1-NetworkInterface')]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageName'))).primaryEndpoints.blob]"
          }
        }
      }
    },
    {
      "name": "[concat('server1','/', 'vmBGInfo')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2021-03-01",
      "location": "[variables('location')]",
      "tags": {},
      "dependsOn": ["[resourceId('Microsoft.Compute/virtualMachines', 'server1')]"],
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "BGInfo",
        "typeHandlerVersion": "2.1",
        "autoUpgradeMinorVersion": true,
        "settings": {},
        "protectedSettings": null
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2021-04-01",
      "name": "[concat('server1','/', 'Config')]",
      "location": "[variables('location')]",
      "dependsOn": ["[resourceId('Microsoft.Compute/virtualMachines', 'server1')]"],
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "CustomScriptExtension",
        "typeHandlerVersion": "1.7",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "https://raw.githubusercontent.com/linuxacademy/az-801-configuring-windows-server-hybrid-advanced-services/main/06%20-%20Implement%20a%20Windows%20Server%20Failover%20Cluster/DemoEnvironment/vmconfigure.ps1"
          ],
          "commandToExecute": "powershell.exe -ExecutionPolicy Unrestricted -File vmconfigure.ps1"
        }
      }
    },




    {
      "name": "server2-PublicIP",
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-11-01",
      "location": "[variables('location')]",
      "tags": {},
      "sku": 
      {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static"
      }
    },

    {
      "name": "server2-NetworkInterface",
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-11-01",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', 'server2-PublicIP')]",
        "[resourceId('Microsoft.Network/virtualNetworks', '1awesome-VirtualNetwork')]",
        "[resourceId('Microsoft.Network/loadBalancers', variables('ilbName'))]"
      ],
      "tags": {},
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipConfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "10.0.0.6",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', 'server2-PublicIP')]"
              },
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', '1awesome-VirtualNetwork', '1awesome-VirtualNetwork-Subnet')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('ilbName'), 'backend')]"
                }
              ]
            }
          }
        ],
        "dnsSettings": {
          "dnsServers": ["10.0.0.4"]
        }
      }
    },
    {
      "name": "server2",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2021-03-01",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageName'))]",
        "[resourceId('Microsoft.Network/networkInterfaces', 'server2-NetworkInterface')]",
        "[resourceId('Microsoft.Compute/disks', 'clusterdisk2')]",
        "[resourceId('Microsoft.Compute/virtualMachines','server1')]"
      ],
      "tags": {},
      "properties": {
        "hardwareProfile": {
          "vmSize": "Standard_D2S_v3"
        },
        "osProfile": {
          "computerName": "server2",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "2022-Datacenter",
            "version": "latest"
          },
          "osDisk": {
            "name": "server2OSDisk",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": [
          {
              "lun": 0,
              "name": "clusterdisk2",
              "createOption": "Attach",
              "caching": "None",
              "writeAcceleratorEnabled": false,
              "managedDisk": {
                  "storageAccountType": "StandardSSD_LRS",
                  "id": "[resourceId('Microsoft.Compute/disks', 'clusterdisk2')]"
              },
              "deleteOption": "Detach",
              "diskSizeGB": 8,
              "toBeDetached": false
          }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', 'server2-NetworkInterface')]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageName'))).primaryEndpoints.blob]"
          }
        }
      }
    },
    {
      "name": "[concat('server2','/', 'vmBGInfo')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2021-03-01",
      "location": "[variables('location')]",
      "tags": {},
      "dependsOn": ["[resourceId('Microsoft.Compute/virtualMachines', 'server2')]"],
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "BGInfo",
        "typeHandlerVersion": "2.1",
        "autoUpgradeMinorVersion": true,
        "settings": {},
        "protectedSettings": null
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2021-04-01",
      "name": "[concat('server2','/', 'Config')]",
      "location": "[variables('location')]",
      "dependsOn": ["[resourceId('Microsoft.Compute/virtualMachines', 'server2')]"],
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "CustomScriptExtension",
        "typeHandlerVersion": "1.7",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "https://raw.githubusercontent.com/linuxacademy/az-801-configuring-windows-server-hybrid-advanced-services/main/06%20-%20Implement%20a%20Windows%20Server%20Failover%20Cluster/DemoEnvironment/vmconfigure.ps1"
          ],
          "commandToExecute": "powershell.exe -ExecutionPolicy Unrestricted -File vmconfigure.ps1"
        }
      }
    },




        {
            "apiVersion": "2022-03-02",
            "type": "Microsoft.Compute/disks",
            "name": "clusterdisk1",
            "location": "[variables('location')]",
            "properties": {
                "creationData": {
                    "createOption": "empty"
                },
                "diskSizeGB": 8,
                "encryption": {
                    "type": "EncryptionAtRestWithPlatformKey"
                },
                "dataAccessAuthMode": "None",
                "networkAccessPolicy": "AllowAll",
                "publicNetworkAccess": "Enabled"
            },
            "sku": {
                "name": "StandardSSD_LRS"
            },
            "tags": {}
        },



        {
            "apiVersion": "2022-03-02",
            "type": "Microsoft.Compute/disks",
            "name": "clusterdisk2",
            "location": "[variables('location')]",
            "properties": {
                "creationData": {
                    "createOption": "empty"
                },
                "diskSizeGB": 8,
                "encryption": {
                    "type": "EncryptionAtRestWithPlatformKey"
                },
                "dataAccessAuthMode": "None",
                "networkAccessPolicy": "AllowAll",
                "publicNetworkAccess": "Enabled"
            },
            "sku": {
                "name": "StandardSSD_LRS"
            },
            "tags": {}
        },



      {
            "apiVersion": "2021-05-01",
            "name": "[variables('ilbName')]",
            "type": "Microsoft.Network/loadBalancers",
            "location": "[variables('location')]",
            "dependsOn": ["[resourceId('Microsoft.Network/virtualNetworks', '1awesome-VirtualNetwork')]"],
            "tags": {},
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "frontend",
                        "properties": {
                            "privateIPAddress": "10.0.0.150",
                            "privateIPAddressVersion": "IPv4",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', '1awesome-VirtualNetwork', '1awesome-VirtualNetwork-Subnet')]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "backend",
                        "properties": {
                            "loadBalancerBackendAddresses": [
                                {
                                    "name": "server1",
                                    "properties": {
                                        "virtualNetwork": {
                                            "id": "[resourceId('Microsoft.Network/virtualNetworks', '1awesome-VirtualNetwork')]"
                                        },
                                        "ipAddress": "10.0.0.5"
                                    }
                                },
                                {
                                    "name": "server2",
                                    "properties": {
                                        "virtualNetwork": {
                                            "id": "[resourceId('Microsoft.Network/virtualNetworks', '1awesome-VirtualNetwork')]"
                                        },
                                        "ipAddress": "10.0.0.6"
                                    }
                                }
                            ]
                         }           
                    }
                ],
                "probes": [
                    {
                        "name": "59999probe",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 59999,
                            "requestPath": null,
                            "intervalInSeconds": 10,
                            "numberOfProbes": 1
                        }
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "Port445",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('ilbName'), 'frontend')]"
                            },
                            "frontendPort": 445,
                            "backendPort": 445,
                            "enableFloatingIP": true,
                            "idleTimeoutInMinutes": 4,
                            "protocol": "TCP",
                            "loadDistribution": "Default",
                            "probe": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('ilbName'), '59999probe')]"
                            },
                            "disableOutboundSnat": true,
                            "enableTcpReset": false,
                            "backendAddressPools": [
                                {
                                    "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('ilbName'), 'backend')]"
                                }
                            ]
                        }
                    }
                ],
                "inboundNatRules": [],
                "outboundRules": []
            },
            "sku": {
                "name": "Standard",
                "tier": "Regional"
            }
        }

  ],
  "outputs": {}
}
