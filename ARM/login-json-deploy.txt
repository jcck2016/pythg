Deploying an ARM template using Azure PowerShell is straightforward. Here are the steps you need to follow:

Install Azure PowerShell Module (if not already installed):
Install-Module -Name Az -AllowClobber -Scope CurrentUser

Connect to your Azure account:
Connect-AzAccount

Select the appropriate subscription (if you have multiple subscriptions):
Select-AzSubscription -SubscriptionId "your-subscription-id"

Deploy the ARM template:
New-AzResourceGroupDeployment -ResourceGroupName "your-resource-group-name" -TemplateFile "path-to-your-template.json"

Here’s a brief explanation of each step:

Step 1: Installs the Azure PowerShell module if you don’t have it installed already.
Step 2: Connects your PowerShell session to your Azure account.
Step 3: Selects the Azure subscription you want to use for the deployment.
Step 4: Deploys the ARM template to the specified resource group.
Make sure to replace "your-subscription-id", "your-resource-group-name", and "path-to-your-template.json" with your actual subscription ID, resource group name, and the path to your ARM template JSON file.




----------------------------


PS C:\Users\Jchu2022\pythg> $cred=Get-Credential                 

PowerShell credential request
Enter your credentials.      
User: kk_lab_user_main-166466647f7143d0@azurekmlprodkodekloud.onmicrosoft.com
Password for user kk_lab_user_main-166466647f7143d0@azurekmlprodkodekloud.onmicrosoft.com: ****************

PS C:\Users\Jchu2022\pythg> connect-azaccount -Credential $cred
WARNING: Authentication with a username and password at the command line is strongly discouraged. Use one of the recommended authentication methods based on your requirements. For additional information, visit https://go.microsoft.com/fwlink/?linkid=2276971.
WARNING: You may need to login again after updating "EnableLoginByWam".

Subscription name Tenant

Subscription name Tenant
----------------- ------
azurekmlprod      Default Directory


Subscription name Tenant
----------------- ------
azurekmlprod      Default Directory

Subscription name Tenant
----------------- ------

Subscription name Tenant
----------------- ------
Subscription name Tenant
----------------- ------
----------------- ------
azurekmlprod      Default Directory

PS C:\Users\Jchu2022\pythg> Get-AzSubscription



[Survey] Help us improve Azure PowerShell by sharing your experience. This survey should take about 5 minutes. Run 'Open-AzSurveyLink' to open in browser. Learn more at https://go.microsoft.com/fwlink/?linkid=2202892
   TenantId: 30fe8ff1-adc6-444d-ba94-1238894df42c

Name         Id                                   State
----         --                                   -----
azurekmlprod a2b28c85-1948-4263-90ca-bade2bac4df4 Enabled

PS C:\Users\Jchu2022\pythg> cd .\ARM\
PS C:\Users\Jchu2022\pythg\ARM> dir

    Directory: C:\Users\Jchu2022\pythg\ARM

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a---           12/7/2023  9:10 PM            806 01.storage6.json
Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a---           12/7/2023  9:10 PM            806 01.storage6.json
----                 -------------         ------ ----
-a---           12/7/2023  9:10 PM            806 01.storage6.json
-a---           12/7/2023  9:10 PM            806 01.storage6.json
-a---           12/7/2023  9:10 PM            608 01.storage7.json
-a---           12/7/2023  9:10 PM            608 01.storage7.json
-a---           12/7/2023  9:10 PM            608 01.storage8.json
-a---           12/7/2023  9:10 PM            430 01storage.ps1
-a---          12/18/2023  9:42 PM              0 10 storage-accounts.ps1
-a---          12/18/2023  9:42 PM          23198 newVM.json
-a---           11/8/2024 11:10 PM            255 test.json
-a---           12/7/2023  9:49 PM           3658 vm.json

PS C:\Users\Jchu2022\pythg\ARM> Get-AzSubscription          

   TenantId: 30fe8ff1-adc6-444d-ba94-1238894df42c

Name         Id                                   State
----         --                                   -----
azurekmlprod a2b28c85-1948-4263-90ca-bade2bac4df4 Enabled

PS C:\Users\Jchu2022\pythg\ARM> pwd

Path
----
C:\Users\Jchu2022\pythg\ARM

PS C:\Users\Jchu2022\pythg\ARM> Get-AzResource
PS C:\Users\Jchu2022\pythg\ARM> Get-AzResourceGroup     

ResourceGroupName : kml_rg_main-166466647f7143d0
Location          : westus
ProvisioningState : Succeeded
Tags              : 
ResourceId        : /subscriptions/a2b28c85-1948-4263-90ca-bade2bac4df4/resourceGroups/kml_rg_main-166466647f7143d0

PS C:\Users\Jchu2022\pythg\ARM> 
PS C:\Users\Jchu2022\pythg\ARM> New-AzResourceGroupDeployment -Name test2 -ResourceGroupName kml_rg_main-166466647f7143d0 -TemplateParameterFile .\test2.json
New-AzResourceGroupDeployment: Cannot retrieve the dynamic parameters for the cmdlet. One of the -TemplateFile, -TemplateUri, -TemplateSpecId or -TemplateObject parameters must be 
supplied unless a .bicepparam file is supplied with parameter -TemplateParameterFile.
PS C:\Users\Jchu2022\pythg\ARM> New-AzResourceGroupDeployment -Name test2 -ResourceGroupName kml_rg_main-166466647f7143d0 -TemplateFile .\test2.json
New-AzResourceGroupDeployment: 8:39:25 PM - Error: Code=InvalidDeployment; Message=The deployment 'test2' must have either the TemplateLink or Template property set. Please see https://aka.ms/arm-module for usage details.
New-AzResourceGroupDeployment: The deployment validation failed
PS C:\Users\Jchu2022\pythg\ARM> New-AzResourceGroupDeployment -Name test2 -ResourceGroupName kml_rg_main-166466647f7143d0 -TemplateFile .\vm.json
New-AzResourceGroupDeployment: Deserialized JSON type 'Newtonsoft.Json.Linq.JValue' is not compatible with expected type 'Newtonsoft.Json.Linq.JObject'. Path '', line 1, position 9.
PS C:\Users\Jchu2022\pythg\ARM> New-AzResourceGroupDeployment -Name test2 -ResourceGroupName kml_rg_main-166466647f7143d0 -TemplateParameterFile .\01.storage6.json
New-AzResourceGroupDeployment: Cannot retrieve the dynamic parameters for the cmdlet. One of the -TemplateFile, -TemplateUri, -TemplateSpecId or -TemplateObject parameters must be supplied unless a .bicepparam file is supplied with parameter -TemplateParameterFile.
PS C:\Users\Jchu2022\pythg\ARM> New-AzResourceGroupDeployment -Name test2 -ResourceGroupName kml_rg_main-166466647f7143d0 -TemplateParameterFile .\newVM.json
New-AzResourceGroupDeployment: Cannot retrieve the dynamic parameters for the cmdlet. One of the -TemplateFile, -TemplateUri, -TemplateSpecId or -TemplateObject parameters must be supplied unless a .bicepparam file is supplied with parameter -TemplateParameterFile.



PS C:\Users\Jchu2022> Get-AzResource -ResourceGroupName kml_rg_main-166466647f7143d0

Name              : myVM
ResourceGroupName : kml_rg_main-166466647f7143d0
ResourceType      : Microsoft.Compute/virtualMachines
Location          : westus
ResourceId        : /subscriptions/a2b28c85-1948-4263-90ca-bade2bac4df4/resourceGroups/kml_rg_main-166466647f7143d0/pro
                    viders/Microsoft.Compute/virtualMachines/myVM
Tags              :

Name              : myNetworkSecurityGroup
ResourceGroupName : kml_rg_main-166466647f7143d0
ResourceType      : Microsoft.Network/networkSecurityGroups
Location          : westus
ResourceId        : /subscriptions/a2b28c85-1948-4263-90ca-bade2bac4df4/resourceGroups/kml_rg_main-166466647f7143d0/pro
                    viders/Microsoft.Network/networkSecurityGroups/myNetworkSecurityGroup
Tags              :

Name              : myPublicIP
ResourceGroupName : kml_rg_main-166466647f7143d0
ResourceType      : Microsoft.Network/publicIPAddresses
Location          : westus
ResourceId        : /subscriptions/a2b28c85-1948-4263-90ca-bade2bac4df4/resourceGroups/kml_rg_main-166466647f7143d0/pro
                    viders/Microsoft.Network/publicIPAddresses/myPublicIP
Tags              :

Name              : myVnet
ResourceGroupName : kml_rg_main-166466647f7143d0
ResourceType      : Microsoft.Network/virtualNetworks
Location          : westus
ResourceId        : /subscriptions/a2b28c85-1948-4263-90ca-bade2bac4df4/resourceGroups/kml_rg_main-166466647f7143d0/pro
                    viders/Microsoft.Network/virtualNetworks/myVnet
Tags              :

Name              : myNic
ResourceGroupName : kml_rg_main-166466647f7143d0
ResourceType      : Microsoft.Network/networkInterfaces
Location          : westus
ResourceId        : /subscriptions/a2b28c85-1948-4263-90ca-bade2bac4df4/resourceGroups/kml_rg_main-166466647f7143d0/pro
                    viders/Microsoft.Network/networkInterfaces/myNic
Tags              :

Name              : myVM_OsDisk_1_1ca9522d9dcc4b3b8f32b790beceaa50
ResourceGroupName : KML_RG_MAIN-166466647F7143D0
ResourceType      : Microsoft.Compute/disks
Location          : westus
ResourceId        : /subscriptions/a2b28c85-1948-4263-90ca-bade2bac4df4/resourceGroups/KML_RG_MAIN-166466647F7143D0/pro
                    viders/Microsoft.Compute/disks/myVM_OsDisk_1_1ca9522d9dcc4b3b8f32b790beceaa50


===============================================


I’d be happy to help you get started with Git and GitHub! Here are the detailed steps:
1. Set Up a Local Git Repository
Install Git:
Download and install Git from git-scm.com.
Follow the installation instructions for your operating system.
Configure Git:
Open your terminal (or Git Bash on Windows) and set your username and email:
Plain Text
git config --global user.name "Your Name"git config --global user.email "your.email@example.com"


Initialize a Local Repository:
Navigate to your project directory:
Plain Text
cd /path/to/your/project


Initialize the repository:
Plain Text
git init


Add Files to the Repository:
Add your project files:
Plain Text
git add .


Commit the files:
Plain Text
git commit -m "Initial commit"


2. Register for a GitHub Account
Sign Up:
Go to GitHub and click on “Sign up”.
Follow the instructions to create your account.
Verify Your Email:
Check your email for a verification message from GitHub and follow the instructions to verify your email address.
3. Create a Repository on GitHub
Create a New Repository:
Once logged in, click on the “+” icon in the top right corner and select “New repository”.
Fill in the repository name, description (optional), and choose whether it will be public or private.
Click “Create repository”.
4. Push Your Local Repository to GitHub
Link Your Local Repository to GitHub:
In your terminal, add the remote repository:
Plain Text
git remote add origin https://github.com/your-username/your-repository.git


Push Your Code:
Push your local repository to GitHub:
Plain Text
git push -u origin master


5. Verify Your Code on GitHub
Check Your Repository:
Go to your GitHub repository URL (e.g., https://github.com/your-username/your-repository).
Verify that your code has been successfully pushed.

================================

PS C:\Users\Jchu2022\pythg> git add .
PS C:\Users\Jchu2022\pythg> git commit -m "added ARM codes"
[master 2f542a5] added ARM codes
 7 files changed, 1315 insertions(+), 82 deletions(-)
 create mode 100644 ARM/login-json-deploy.txt
 create mode 100644 ARM/test.json
 create mode 100644 ARM/test2.json
 create mode 100644 ARM/vm3.json
 create mode 100644 Bicep/test.bicep
 create mode 100644 __pycache__/azurearchad.json
PS C:\Users\Jchu2022\pythg> git push origin master
fatal: 'origin' does not appear to be a git repository
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
PS C:\Users\Jchu2022\pythg> git status
On branch master
Your branch is ahead of 'orgin/master' by 1 commit.
  (use "git push" to publish your local commits)

nothing to commit, working tree clean
PS C:\Users\Jchu2022\pythg> git login
git: 'login' is not a git command. See 'git --help'.

The most similar command is
        column
PS C:\Users\Jchu2022\pythg> git remote add origin https://github.com/jcck2016/pythg.git
PS C:\Users\Jchu2022\pythg> git push -u origin main
error: src refspec main does not match any
error: failed to push some refs to 'https://github.com/jcck2016/pythg.git'
PS C:\Users\Jchu2022\pythg> git push origin master
Enumerating objects: 15, done.
Counting objects: 100% (15/15), done.
Delta compression using up to 8 threads
Compressing objects: 100% (9/9), done.
Writing objects: 100% (11/11), 7.48 KiB | 1.25 MiB/s, done.
Total 11 (delta 3), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (3/3), completed with 2 local objects.
To https://github.com/jcck2016/pythg.git
   d2a0bec..2f542a5  master -> master
PS C:\Users\Jchu2022\pythg>


































